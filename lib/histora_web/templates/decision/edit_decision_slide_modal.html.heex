<div x-data="{ open: false, toggle() { this.open = ! this.open } }" class="flex justify-center">
    <!-- Trigger -->
    <span @click="toggle">
        <button class="cursor-pointer rounded-md px-3 py-2 hover:bg-light-grey dark:bg-darkest-grey dark:text-light-grey dark:hover:bg-primary">
            Edit
        </button>
    </span>

    <!-- Slideover -->
    <div
        x-dialog
        x-model="open"
        style="display: none"
        class="fixed inset-0 overflow-hidden z-10"
    >
        <!-- Overlay -->
        <%# <div x-dialog:overlay x-transition.opacity class="fixed inset-0 bg-black bg-opacity-50"></div> %>

        <!-- Panel -->
        <.form let={f} for={@edit_decision_changeset} action={@action}>
        <div class="fixed inset-y-0 right-0 max-w-lg w-full">
            <div
                x-dialog:panel
                x-transition:enter="transition ease-out duration-300"
                x-transition:enter-start="translate-x-full"
                x-transition:enter-end="translate-x-0"
                x-transition:leave="transition ease-in duration-300"
                x-transition:leave-start="translate-x-0"
                x-transition:leave-end="translate-x-full"
                class="h-full w-full"
            >
                <div class="h-full flex flex-col justify-between bg-really-light-grey shadow-lg overflow-y-auto">
                    <!-- Close Button -->
                    <div class="absolute top-0 right-0 pt-4 pr-4">
                        <button type="button" @click="$dialog.close()" class="bg-gray-50 rounded-lg p-2 text-gray-600 focus:outline-none focus-visible:ring-2 focus-visible:ring-blue-500 focus-visible:ring-offset-2">
                            <span class="sr-only">Close slideover</span>

                            <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4" viewBox="0 0 20 20" fill="currentColor">
                                <path fill-rule="evenodd" d="M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z" clip-rule="evenodd" />
                            </svg>
                        </button>
                    </div>

                    <!-- Body -->
                    <div class="p-8">
                        <!-- Title -->
                        <h2 x-dialog:title class="text-3xl mb-8 font-bold">Edit Decision</h2>

                        <!-- Content -->
                        <div class="form_content">
                            <%= if @decision_changeset.action do %> <div class="alert alert-danger"> <p>Oops, something went wrong! Please check the errors below.</p></div><% end %>

                            <div class="mt-1 my-4">
                                <%= textarea f, :content, class: "shadow-sm focus:ring-primary focus:border-primary block w-full sm:text-sm border-light-grey rounded-md dark:bg-black dark:text-light-grey dark:border-none", placeholder: "describe what you are decisioning and add some context to why" %>
                            </div>
                        
                            <div class="mt-1 my-4">
                                <label for="name" class="block text-sm font-medium text-gray-700">Tags</label>
                                <%= text_input f, :tag_list, value: Enum.map(@decision.tags, fn x -> "#{x.name}, " end), placeholder: "operations, accounting, office, pricing", class: "mt-2 shadow-sm focus:ring-primary focus:border-primary block w-full sm:text-sm border-light-grey rounded-md dark:bg-black dark:text-light-grey dark:border-none" %>
                            </div>
                            
                            <div class="mt-1 my-4">
                                <label for="reference" class="block text-sm font-medium text-gray-700">Reference</label>
                                <%= text_input f, :reference, placeholder: "optional: www.link-to-something-important.com", class: "shadow-sm focus:ring-primary focus:border-primary block w-full sm:text-sm border-light-grey rounded-md dark:bg-black dark:text-light-grey dark:border-none" %>
                            </div>             

                            <div class="mt-1 my-4">
                                <label for="name" class="block text-sm font-medium text-gray-700">Scopes</label>
                                                    
                                <div
                                    x-data={"{
                                        multiple: true,
                                        value: [#{ 
                                            for scope <- @decision.scopes do
                                                "#{scope.id}, "
                                            end
                                        }],
                                        options: [#{ 
                                            for scope <- @scopes do
                                                "{value: #{scope.id}, label: '#{scope.name}'}, "
                                            end
                                        }],
                                        init() {
                                            let bootSelect2 = () => {
                                                let selections = this.multiple ? this.value : [this.value]
                                
                                                $(this.$refs.select).select2({
                                                    multiple: this.multiple,
                                                    data: this.options.map(i => ({
                                                        id: i.value,
                                                        text: i.label,
                                                        selected: selections.map(i => String(i)).includes(String(i.value)),
                                                    })),
                                                })
                                            }
                                
                                            let refreshSelect2 = () => {
                                                $(this.$refs.select).select2('destroy')
                                                this.$refs.select.innerHTML = ''
                                                bootSelect2()
                                            }
                                
                                            bootSelect2()
                                
                                            $(this.$refs.select).on('change', () => {
                                                let currentSelection = $(this.$refs.select).select2('data')
                                
                                                this.value = this.multiple
                                                    ? currentSelection.map(i => i.id)
                                                    : currentSelection[0].id
                                            })
                                
                                            this.$watch('value', () => refreshSelect2())
                                            this.$watch('options', () => refreshSelect2())
                                        },
                                    }"}
                                    class="w-full"
                                >
                                    <select x-ref="select" data-placeholder="click to select" name="scopes[]" id="scopes[]" multiple class="w-full" ></select>
                                </div>
                            </div>

                            <div class="mt-1 my-4">
                                <label for="name" class="block text-sm font-medium text-gray-700">Connect Other Users</label>
                                                    
                                <div
                                    x-data={"{
                                        multiple: true,
                                        value: [#{ 
                                            for user <- @decision.users do
                                                "#{user.id}, "
                                            end
                                        }],
                                        options: [#{ 
                                            for user <- @users do
                                                "{value: #{user.id}, label: '#{user.email}'}, "
                                            end
                                        }],
                                        init() {
                                            let bootSelect2 = () => {
                                                let selections = this.multiple ? this.value : [this.value]
                                
                                                $(this.$refs.select).select2({
                                                    multiple: this.multiple,
                                                    data: this.options.map(i => ({
                                                        id: i.value,
                                                        text: i.label,
                                                        selected: selections.map(i => String(i)).includes(String(i.value)),
                                                    })),
                                                })
                                            }
                                
                                            let refreshSelect2 = () => {
                                                $(this.$refs.select).select2('destroy')
                                                this.$refs.select.innerHTML = ''
                                                bootSelect2()
                                            }
                                
                                            bootSelect2()
                                
                                            $(this.$refs.select).on('change', () => {
                                                let currentSelection = $(this.$refs.select).select2('data')
                                
                                                this.value = this.multiple
                                                    ? currentSelection.map(i => i.id)
                                                    : currentSelection[0].id
                                            })
                                
                                            this.$watch('value', () => refreshSelect2())
                                            this.$watch('options', () => refreshSelect2())
                                        },
                                    }"}
                                    class="w-full"
                                >
                                    <select x-ref="select" data-placeholder="click to select" name="users[]" id="users[]" multiple class="w-full" ></select>
                                </div>
                            </div>

                            <!-- Toggle -->
                            <div
                                x-data={"{ value: #{ @decision.private } }"}
                                class="flex items-center mt-6 mb-2"
                                x-id="['toggle-label']"
                            >
                                <input type="hidden" name="private" :value="value">

                                <!-- Label -->
                                <label
                                    @click="$refs.toggle.click(); $refs.toggle.focus()"
                                    :id="$id('toggle-label')"
                                    class="text-black font-bold dark:text-white mr-2"
                                >
                                    Private
                                </label>

                                <!-- Button -->
                                <button
                                    x-ref="toggle"
                                    @click="value = ! value"
                                    type="button"
                                    role="switch"
                                    :aria-checked="value"
                                    :aria-labelledby="$id('toggle-label')"
                                    :class="value ? 'bg-white border-2 border-primary' : 'bg-white border-2 border-gray'"
                                    class="ml-4 relative w-14 py-1 px-0 inline-flex rounded-full"
                                >
                                    <span
                                        :class="value ? 'bg-primary translate-x-6' : 'bg-grey translate-x-1'"
                                        class="w-6 h-6 rounded-full transition"
                                        aria-hidden="true"
                                    ></span>
                                </button>
                            </div>
                            <div class="text-xs text-grey">when enabled, decision will only show to those who share its scope or to only you </div>

                        </div>
                    </div>

                    <!-- Footer -->
                    <div class="p-4 flex justify-end space-x-2 bg-gray-50">
                        <button type="button" x-on:click="$dialog.close()" class="text-sm focus:outline-none focus-visible:ring-2 focus-visible:ring-blue-500 rounded-lg px-5 py-2.5">
                            Close
                        </button>

                        <%= submit do  %>
                            <button class="bg-primary hover:bg-dark-primary hover:text-white text-white font-bold py-2 px-3 mx-2 rounded">
                                Update
                            </button>
                        <% end %> 
                    </div>
                </div>
            </div>
        </div>
        </.form>
    </div>
</div>