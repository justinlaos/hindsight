<%# is called from the action bar %>

<form  action="/records" method="GET">
    <div
        x-show="open"
        style="display: none"
        x-on:keydown.escape.prevent.stop="open = false"
        role="dialog"
        aria-modal="true"
        x-id="['modal-title']"
        :aria-labelledby="$id('modal-title')"
        class="fixed inset-0 overflow-y-auto z-40"
    >
        <!-- Overlay -->
        <div x-show="open" x-transition.opacity class="fixed inset-0 "></div>

        <!-- Panel -->
        <div
            x-show="open" x-transition
            x-on:click="open = false"
            class="relative min-h-screen flex items-center justify-center p-4"
        >
            <div
                x-on:click.stop
                x-trap.noscroll.inert="open"
                class="relative max-w-2xl w-full bg-light-grey rounded-xl shadow-xl p-8 overflow-y-auto dark:bg-darkest-grey dark:text-light-grey"
            >
            <!-- Title -->
            <div class="mb-4 text-2xl font-bold" :id="$id('modal-title')">Filter Records</div>
            <!-- Content -->

        <!--
            Notice: We have to use jQuery 3.5.1 instead of 3.6.0 because select2's
            input field won't autofocus on open in that version for this reason:
            https://github.com/select2/select2/issues/5993
        -->
        <div class="mt-1 my-4">
            <label for="name" class="block text-sm font-medium text-gray-700">Tags</label>
            <div
                x-data={"{
                    multiple: true,
                    value: [#{ 
                        for tag <- @selected_filtered_tags do
                            "#{tag.id}, "
                        end
                    }],
                    options: [#{ 
                        for tag <- @filterable_tags do
                            "{value: #{tag.id}, label: '#{tag.name}'}, "
                        end
                    }],
                    init() {
                        let bootSelect2 = () => {
                            let selections = this.multiple ? this.value : [this.value]
            
                            $(this.$refs.selecttag).select2({
                                multiple: this.multiple,
                                data: this.options.map(i => ({
                                    id: i.value,
                                    text: i.label,
                                    selected: selections.map(i => String(i)).includes(String(i.value)),
                                })),
                            })
                        }
            
                        let refreshSelect2 = () => {
                            $(this.$refs.selecttag).select2('destroy')
                            this.$refs.selecttag.innerHTML = ''
                            bootSelect2()
                        }
            
                        bootSelect2()
            
                        $(this.$refs.selecttag).on('change', () => {
                            let currentSelection = $(this.$refs.selecttag).select2('data')
            
                            this.value = this.multiple
                                ? currentSelection.map(i => i.id)
                                : currentSelection[0].id
                        })
            
                        this.$watch('value', () => refreshSelect2())
                        this.$watch('options', () => refreshSelect2())
                    },
                }"}
                class="w-full"
            >
                <select x-ref="selecttag" data-placeholder="click to select" name="tag_list[]" id="tag_list[]" multiple class="w-full" ></select>
            </div>
        </div>



        <div class="mt-1 my-4">
            <label for="name" class="block text-sm font-medium text-gray-700">Users</label>
            <div
                x-data={"{
                    multiple: true,
                    value: [#{ 
                        for user <- @selected_filtered_users do
                            "#{user.id}, "
                        end
                    }],
                    options: [#{ 
                        for user <- @filterable_users do
                            "{value: #{user.id}, label: '#{user.email}'}, "
                        end
                    }],
                    init() {
                        let bootSelect2 = () => {
                            let selections = this.multiple ? this.value : [this.value]
            
                            $(this.$refs.select).select2({
                                multiple: this.multiple,
                                data: this.options.map(i => ({
                                    id: i.value,
                                    text: i.label,
                                    selected: selections.map(i => String(i)).includes(String(i.value)),
                                })),
                            })
                        }
            
                        let refreshSelect2 = () => {
                            $(this.$refs.select).select2('destroy')
                            this.$refs.select.innerHTML = ''
                            bootSelect2()
                        }
            
                        bootSelect2()
            
                        $(this.$refs.select).on('change', () => {
                            let currentSelection = $(this.$refs.select).select2('data')
            
                            this.value = this.multiple
                                ? currentSelection.map(i => i.id)
                                : currentSelection[0].id
                        })
            
                        this.$watch('value', () => refreshSelect2())
                        this.$watch('options', () => refreshSelect2())
                    },
                }"}
                class="w-full"
            >
                <select x-ref="select" data-placeholder="click to select" name="filter_users[]" id="filter_users[]" multiple class="w-full" ></select>
            </div>
        </div>

        <div class="mt-1 my-4">
            <label for="name" class="block text-sm font-medium text-gray-700">Time from and to</label>
            <%= render HistoraWeb.RecordView, "date_filter.html", conn: @conn, formated_start_date: @formated_start_date, formated_end_date: @formated_end_date %>
        </div>
            
                <!-- Buttons -->
                <div class="mt-8 flex justify-between">
                    <button type="button" x-on:click="open = false" class="bg-light-grey dark:bg-darkest-grey border-primary border-2 text-primary hover:bg-primary dark:hover:bg-primary hover:text-white font-bold py-2 px-2 rounded">
                        Cancel
                    </button>

                    <button type="submit" class="bg-primary hover:bg-primary hover:text-white text-white font-bold py-3 px-3 rounded">
                        Filter
                    </button>
                </div>
            </div>
        </div>
    </div>
</form>